//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4005
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Types.TypeDataSets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DSProject")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSProject : global::System.Data.DataSet {
        
        private PROJECTDataTable tablePROJECT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSProject() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSProject(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PROJECT"] != null)) {
                    base.Tables.Add(new PROJECTDataTable(ds.Tables["PROJECT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROJECTDataTable PROJECT {
            get {
                return this.tablePROJECT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DSProject cln = ((DSProject)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PROJECT"] != null)) {
                    base.Tables.Add(new PROJECTDataTable(ds.Tables["PROJECT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePROJECT = ((PROJECTDataTable)(base.Tables["PROJECT"]));
            if ((initTable == true)) {
                if ((this.tablePROJECT != null)) {
                    this.tablePROJECT.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSProject";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSProject.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePROJECT = new PROJECTDataTable();
            base.Tables.Add(this.tablePROJECT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePROJECT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DSProject ds = new DSProject();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PROJECTRowChangeEventHandler(object sender, PROJECTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PROJECTDataTable : global::System.Data.TypedTableBase<PROJECTRow> {
            
            private global::System.Data.DataColumn columnRECID;
            
            private global::System.Data.DataColumn columnLOGO;
            
            private global::System.Data.DataColumn columnPPT;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnACRONYM;
            
            private global::System.Data.DataColumn columnONELINEPITCH;
            
            private global::System.Data.DataColumn columnSECTOR;
            
            private global::System.Data.DataColumn columnBUSINESSSUMMARY;
            
            private global::System.Data.DataColumn columnMANAGEMENT;
            
            private global::System.Data.DataColumn columnCUSTOMERPROBLEM;
            
            private global::System.Data.DataColumn columnPRODUCTORSERVICES;
            
            private global::System.Data.DataColumn columnTARGETMARKET;
            
            private global::System.Data.DataColumn columnCUSTOMERS;
            
            private global::System.Data.DataColumn columnSTRATEGY;
            
            private global::System.Data.DataColumn columnBUSINESSMODELTYPE;
            
            private global::System.Data.DataColumn columnCOMPETITORS;
            
            private global::System.Data.DataColumn columnCOMPETITIVEADVANGE;
            
            private global::System.Data.DataColumn columnINVESTMENTAMOUNT;
            
            private global::System.Data.DataColumn columnAPPROVED;
            
            private global::System.Data.DataColumn columnLOGOAPPROVED;
            
            private global::System.Data.DataColumn columnCREATEDBY;
            
            private global::System.Data.DataColumn columnCREATIONDATE;
            
            private global::System.Data.DataColumn columnMODIFIEDBY;
            
            private global::System.Data.DataColumn columnMODIFICATIONDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTDataTable() {
                this.TableName = "PROJECT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJECTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PROJECTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RECIDColumn {
                get {
                    return this.columnRECID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOGOColumn {
                get {
                    return this.columnLOGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPTColumn {
                get {
                    return this.columnPPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACRONYMColumn {
                get {
                    return this.columnACRONYM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ONELINEPITCHColumn {
                get {
                    return this.columnONELINEPITCH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SECTORColumn {
                get {
                    return this.columnSECTOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSINESSSUMMARYColumn {
                get {
                    return this.columnBUSINESSSUMMARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MANAGEMENTColumn {
                get {
                    return this.columnMANAGEMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSTOMERPROBLEMColumn {
                get {
                    return this.columnCUSTOMERPROBLEM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTORSERVICESColumn {
                get {
                    return this.columnPRODUCTORSERVICES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TARGETMARKETColumn {
                get {
                    return this.columnTARGETMARKET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSTOMERSColumn {
                get {
                    return this.columnCUSTOMERS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STRATEGYColumn {
                get {
                    return this.columnSTRATEGY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSINESSMODELTYPEColumn {
                get {
                    return this.columnBUSINESSMODELTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPETITORSColumn {
                get {
                    return this.columnCOMPETITORS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPETITIVEADVANGEColumn {
                get {
                    return this.columnCOMPETITIVEADVANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INVESTMENTAMOUNTColumn {
                get {
                    return this.columnINVESTMENTAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPROVEDColumn {
                get {
                    return this.columnAPPROVED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOGOAPPROVEDColumn {
                get {
                    return this.columnLOGOAPPROVED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDBYColumn {
                get {
                    return this.columnCREATEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATIONDATEColumn {
                get {
                    return this.columnCREATIONDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFIEDBYColumn {
                get {
                    return this.columnMODIFIEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFICATIONDATEColumn {
                get {
                    return this.columnMODIFICATIONDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow this[int index] {
                get {
                    return ((PROJECTRow)(this.Rows[index]));
                }
            }
            
            public event PROJECTRowChangeEventHandler PROJECTRowChanging;
            
            public event PROJECTRowChangeEventHandler PROJECTRowChanged;
            
            public event PROJECTRowChangeEventHandler PROJECTRowDeleting;
            
            public event PROJECTRowChangeEventHandler PROJECTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPROJECTRow(PROJECTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow AddPROJECTRow(
                        byte[] LOGO, 
                        byte[] PPT, 
                        string NAME, 
                        string ACRONYM, 
                        string ONELINEPITCH, 
                        int SECTOR, 
                        string BUSINESSSUMMARY, 
                        string MANAGEMENT, 
                        string CUSTOMERPROBLEM, 
                        string PRODUCTORSERVICES, 
                        string TARGETMARKET, 
                        string CUSTOMERS, 
                        string STRATEGY, 
                        int BUSINESSMODELTYPE, 
                        string COMPETITORS, 
                        string COMPETITIVEADVANGE, 
                        string INVESTMENTAMOUNT, 
                        bool APPROVED, 
                        bool LOGOAPPROVED, 
                        int CREATEDBY, 
                        System.DateTime CREATIONDATE, 
                        int MODIFIEDBY, 
                        System.DateTime MODIFICATIONDATE) {
                PROJECTRow rowPROJECTRow = ((PROJECTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LOGO,
                        PPT,
                        NAME,
                        ACRONYM,
                        ONELINEPITCH,
                        SECTOR,
                        BUSINESSSUMMARY,
                        MANAGEMENT,
                        CUSTOMERPROBLEM,
                        PRODUCTORSERVICES,
                        TARGETMARKET,
                        CUSTOMERS,
                        STRATEGY,
                        BUSINESSMODELTYPE,
                        COMPETITORS,
                        COMPETITIVEADVANGE,
                        INVESTMENTAMOUNT,
                        APPROVED,
                        LOGOAPPROVED,
                        CREATEDBY,
                        CREATIONDATE,
                        MODIFIEDBY,
                        MODIFICATIONDATE};
                rowPROJECTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPROJECTRow);
                return rowPROJECTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow FindByRECID(int RECID) {
                return ((PROJECTRow)(this.Rows.Find(new object[] {
                            RECID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PROJECTDataTable cln = ((PROJECTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PROJECTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRECID = base.Columns["RECID"];
                this.columnLOGO = base.Columns["LOGO"];
                this.columnPPT = base.Columns["PPT"];
                this.columnNAME = base.Columns["NAME"];
                this.columnACRONYM = base.Columns["ACRONYM"];
                this.columnONELINEPITCH = base.Columns["ONELINEPITCH"];
                this.columnSECTOR = base.Columns["SECTOR"];
                this.columnBUSINESSSUMMARY = base.Columns["BUSINESSSUMMARY"];
                this.columnMANAGEMENT = base.Columns["MANAGEMENT"];
                this.columnCUSTOMERPROBLEM = base.Columns["CUSTOMERPROBLEM"];
                this.columnPRODUCTORSERVICES = base.Columns["PRODUCTORSERVICES"];
                this.columnTARGETMARKET = base.Columns["TARGETMARKET"];
                this.columnCUSTOMERS = base.Columns["CUSTOMERS"];
                this.columnSTRATEGY = base.Columns["STRATEGY"];
                this.columnBUSINESSMODELTYPE = base.Columns["BUSINESSMODELTYPE"];
                this.columnCOMPETITORS = base.Columns["COMPETITORS"];
                this.columnCOMPETITIVEADVANGE = base.Columns["COMPETITIVEADVANGE"];
                this.columnINVESTMENTAMOUNT = base.Columns["INVESTMENTAMOUNT"];
                this.columnAPPROVED = base.Columns["APPROVED"];
                this.columnLOGOAPPROVED = base.Columns["LOGOAPPROVED"];
                this.columnCREATEDBY = base.Columns["CREATEDBY"];
                this.columnCREATIONDATE = base.Columns["CREATIONDATE"];
                this.columnMODIFIEDBY = base.Columns["MODIFIEDBY"];
                this.columnMODIFICATIONDATE = base.Columns["MODIFICATIONDATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRECID = new global::System.Data.DataColumn("RECID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECID);
                this.columnLOGO = new global::System.Data.DataColumn("LOGO", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGO);
                this.columnPPT = new global::System.Data.DataColumn("PPT", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPT);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnACRONYM = new global::System.Data.DataColumn("ACRONYM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACRONYM);
                this.columnONELINEPITCH = new global::System.Data.DataColumn("ONELINEPITCH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnONELINEPITCH);
                this.columnSECTOR = new global::System.Data.DataColumn("SECTOR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSECTOR);
                this.columnBUSINESSSUMMARY = new global::System.Data.DataColumn("BUSINESSSUMMARY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUSINESSSUMMARY);
                this.columnMANAGEMENT = new global::System.Data.DataColumn("MANAGEMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANAGEMENT);
                this.columnCUSTOMERPROBLEM = new global::System.Data.DataColumn("CUSTOMERPROBLEM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMERPROBLEM);
                this.columnPRODUCTORSERVICES = new global::System.Data.DataColumn("PRODUCTORSERVICES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCTORSERVICES);
                this.columnTARGETMARKET = new global::System.Data.DataColumn("TARGETMARKET", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTARGETMARKET);
                this.columnCUSTOMERS = new global::System.Data.DataColumn("CUSTOMERS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMERS);
                this.columnSTRATEGY = new global::System.Data.DataColumn("STRATEGY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTRATEGY);
                this.columnBUSINESSMODELTYPE = new global::System.Data.DataColumn("BUSINESSMODELTYPE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUSINESSMODELTYPE);
                this.columnCOMPETITORS = new global::System.Data.DataColumn("COMPETITORS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPETITORS);
                this.columnCOMPETITIVEADVANGE = new global::System.Data.DataColumn("COMPETITIVEADVANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPETITIVEADVANGE);
                this.columnINVESTMENTAMOUNT = new global::System.Data.DataColumn("INVESTMENTAMOUNT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINVESTMENTAMOUNT);
                this.columnAPPROVED = new global::System.Data.DataColumn("APPROVED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPROVED);
                this.columnLOGOAPPROVED = new global::System.Data.DataColumn("LOGOAPPROVED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGOAPPROVED);
                this.columnCREATEDBY = new global::System.Data.DataColumn("CREATEDBY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATEDBY);
                this.columnCREATIONDATE = new global::System.Data.DataColumn("CREATIONDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATIONDATE);
                this.columnMODIFIEDBY = new global::System.Data.DataColumn("MODIFIEDBY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFIEDBY);
                this.columnMODIFICATIONDATE = new global::System.Data.DataColumn("MODIFICATIONDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFICATIONDATE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRECID}, true));
                this.columnRECID.AutoIncrement = true;
                this.columnRECID.AutoIncrementSeed = -1;
                this.columnRECID.AutoIncrementStep = -1;
                this.columnRECID.AllowDBNull = false;
                this.columnRECID.ReadOnly = true;
                this.columnRECID.Unique = true;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 50;
                this.columnACRONYM.MaxLength = 50;
                this.columnONELINEPITCH.MaxLength = 1073741823;
                this.columnSECTOR.AllowDBNull = false;
                this.columnBUSINESSSUMMARY.MaxLength = 1073741823;
                this.columnMANAGEMENT.MaxLength = 1073741823;
                this.columnCUSTOMERPROBLEM.MaxLength = 1073741823;
                this.columnPRODUCTORSERVICES.MaxLength = 1073741823;
                this.columnTARGETMARKET.MaxLength = 1073741823;
                this.columnCUSTOMERS.MaxLength = 1073741823;
                this.columnSTRATEGY.MaxLength = 1073741823;
                this.columnCOMPETITORS.MaxLength = 1073741823;
                this.columnCOMPETITIVEADVANGE.MaxLength = 1073741823;
                this.columnINVESTMENTAMOUNT.MaxLength = 50;
                this.columnCREATEDBY.AllowDBNull = false;
                this.columnCREATIONDATE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow NewPROJECTRow() {
                return ((PROJECTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PROJECTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PROJECTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROJECTRowChanged != null)) {
                    this.PROJECTRowChanged(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROJECTRowChanging != null)) {
                    this.PROJECTRowChanging(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROJECTRowDeleted != null)) {
                    this.PROJECTRowDeleted(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROJECTRowDeleting != null)) {
                    this.PROJECTRowDeleting(this, new PROJECTRowChangeEvent(((PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePROJECTRow(PROJECTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSProject ds = new DSProject();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PROJECTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PROJECTRow : global::System.Data.DataRow {
            
            private PROJECTDataTable tablePROJECT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PROJECTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROJECT = ((PROJECTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RECID {
                get {
                    return ((int)(this[this.tablePROJECT.RECIDColumn]));
                }
                set {
                    this[this.tablePROJECT.RECIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] LOGO {
                get {
                    try {
                        return ((byte[])(this[this.tablePROJECT.LOGOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOGO\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.LOGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] PPT {
                get {
                    try {
                        return ((byte[])(this[this.tablePROJECT.PPTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PPT\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.PPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tablePROJECT.NAMEColumn]));
                }
                set {
                    this[this.tablePROJECT.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACRONYM {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.ACRONYMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACRONYM\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.ACRONYMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ONELINEPITCH {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.ONELINEPITCHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ONELINEPITCH\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.ONELINEPITCHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SECTOR {
                get {
                    return ((int)(this[this.tablePROJECT.SECTORColumn]));
                }
                set {
                    this[this.tablePROJECT.SECTORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUSINESSSUMMARY {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.BUSINESSSUMMARYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUSINESSSUMMARY\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.BUSINESSSUMMARYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MANAGEMENT {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.MANAGEMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MANAGEMENT\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.MANAGEMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMERPROBLEM {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.CUSTOMERPROBLEMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTOMERPROBLEM\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.CUSTOMERPROBLEMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCTORSERVICES {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.PRODUCTORSERVICESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCTORSERVICES\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.PRODUCTORSERVICESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TARGETMARKET {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.TARGETMARKETColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TARGETMARKET\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.TARGETMARKETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMERS {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.CUSTOMERSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTOMERS\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.CUSTOMERSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STRATEGY {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.STRATEGYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STRATEGY\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.STRATEGYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BUSINESSMODELTYPE {
                get {
                    try {
                        return ((int)(this[this.tablePROJECT.BUSINESSMODELTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUSINESSMODELTYPE\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.BUSINESSMODELTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPETITORS {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.COMPETITORSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPETITORS\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.COMPETITORSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPETITIVEADVANGE {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.COMPETITIVEADVANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPETITIVEADVANGE\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.COMPETITIVEADVANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INVESTMENTAMOUNT {
                get {
                    try {
                        return ((string)(this[this.tablePROJECT.INVESTMENTAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INVESTMENTAMOUNT\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.INVESTMENTAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool APPROVED {
                get {
                    try {
                        return ((bool)(this[this.tablePROJECT.APPROVEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'APPROVED\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.APPROVEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LOGOAPPROVED {
                get {
                    try {
                        return ((bool)(this[this.tablePROJECT.LOGOAPPROVEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOGOAPPROVED\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.LOGOAPPROVEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CREATEDBY {
                get {
                    return ((int)(this[this.tablePROJECT.CREATEDBYColumn]));
                }
                set {
                    this[this.tablePROJECT.CREATEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATIONDATE {
                get {
                    return ((global::System.DateTime)(this[this.tablePROJECT.CREATIONDATEColumn]));
                }
                set {
                    this[this.tablePROJECT.CREATIONDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MODIFIEDBY {
                get {
                    try {
                        return ((int)(this[this.tablePROJECT.MODIFIEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODIFIEDBY\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.MODIFIEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MODIFICATIONDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePROJECT.MODIFICATIONDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODIFICATIONDATE\' in table \'PROJECT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROJECT.MODIFICATIONDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOGONull() {
                return this.IsNull(this.tablePROJECT.LOGOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOGONull() {
                this[this.tablePROJECT.LOGOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPPTNull() {
                return this.IsNull(this.tablePROJECT.PPTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPPTNull() {
                this[this.tablePROJECT.PPTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACRONYMNull() {
                return this.IsNull(this.tablePROJECT.ACRONYMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACRONYMNull() {
                this[this.tablePROJECT.ACRONYMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsONELINEPITCHNull() {
                return this.IsNull(this.tablePROJECT.ONELINEPITCHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetONELINEPITCHNull() {
                this[this.tablePROJECT.ONELINEPITCHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUSINESSSUMMARYNull() {
                return this.IsNull(this.tablePROJECT.BUSINESSSUMMARYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUSINESSSUMMARYNull() {
                this[this.tablePROJECT.BUSINESSSUMMARYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMANAGEMENTNull() {
                return this.IsNull(this.tablePROJECT.MANAGEMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMANAGEMENTNull() {
                this[this.tablePROJECT.MANAGEMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMERPROBLEMNull() {
                return this.IsNull(this.tablePROJECT.CUSTOMERPROBLEMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMERPROBLEMNull() {
                this[this.tablePROJECT.CUSTOMERPROBLEMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTORSERVICESNull() {
                return this.IsNull(this.tablePROJECT.PRODUCTORSERVICESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTORSERVICESNull() {
                this[this.tablePROJECT.PRODUCTORSERVICESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTARGETMARKETNull() {
                return this.IsNull(this.tablePROJECT.TARGETMARKETColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTARGETMARKETNull() {
                this[this.tablePROJECT.TARGETMARKETColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMERSNull() {
                return this.IsNull(this.tablePROJECT.CUSTOMERSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMERSNull() {
                this[this.tablePROJECT.CUSTOMERSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTRATEGYNull() {
                return this.IsNull(this.tablePROJECT.STRATEGYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTRATEGYNull() {
                this[this.tablePROJECT.STRATEGYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUSINESSMODELTYPENull() {
                return this.IsNull(this.tablePROJECT.BUSINESSMODELTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUSINESSMODELTYPENull() {
                this[this.tablePROJECT.BUSINESSMODELTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPETITORSNull() {
                return this.IsNull(this.tablePROJECT.COMPETITORSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPETITORSNull() {
                this[this.tablePROJECT.COMPETITORSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPETITIVEADVANGENull() {
                return this.IsNull(this.tablePROJECT.COMPETITIVEADVANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPETITIVEADVANGENull() {
                this[this.tablePROJECT.COMPETITIVEADVANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINVESTMENTAMOUNTNull() {
                return this.IsNull(this.tablePROJECT.INVESTMENTAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINVESTMENTAMOUNTNull() {
                this[this.tablePROJECT.INVESTMENTAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPROVEDNull() {
                return this.IsNull(this.tablePROJECT.APPROVEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPROVEDNull() {
                this[this.tablePROJECT.APPROVEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOGOAPPROVEDNull() {
                return this.IsNull(this.tablePROJECT.LOGOAPPROVEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOGOAPPROVEDNull() {
                this[this.tablePROJECT.LOGOAPPROVEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODIFIEDBYNull() {
                return this.IsNull(this.tablePROJECT.MODIFIEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODIFIEDBYNull() {
                this[this.tablePROJECT.MODIFIEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODIFICATIONDATENull() {
                return this.IsNull(this.tablePROJECT.MODIFICATIONDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODIFICATIONDATENull() {
                this[this.tablePROJECT.MODIFICATIONDATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PROJECTRowChangeEvent : global::System.EventArgs {
            
            private PROJECTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRowChangeEvent(PROJECTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PROJECTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Types.TypeDataSets.DSProjectTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PROJECTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PROJECTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PROJECT";
            tableMapping.ColumnMappings.Add("RECID", "RECID");
            tableMapping.ColumnMappings.Add("LOGO", "LOGO");
            tableMapping.ColumnMappings.Add("PPT", "PPT");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("ACRONYM", "ACRONYM");
            tableMapping.ColumnMappings.Add("ONELINEPITCH", "ONELINEPITCH");
            tableMapping.ColumnMappings.Add("SECTOR", "SECTOR");
            tableMapping.ColumnMappings.Add("BUSINESSSUMMARY", "BUSINESSSUMMARY");
            tableMapping.ColumnMappings.Add("MANAGEMENT", "MANAGEMENT");
            tableMapping.ColumnMappings.Add("CUSTOMERPROBLEM", "CUSTOMERPROBLEM");
            tableMapping.ColumnMappings.Add("PRODUCTORSERVICES", "PRODUCTORSERVICES");
            tableMapping.ColumnMappings.Add("TARGETMARKET", "TARGETMARKET");
            tableMapping.ColumnMappings.Add("CUSTOMERS", "CUSTOMERS");
            tableMapping.ColumnMappings.Add("STRATEGY", "STRATEGY");
            tableMapping.ColumnMappings.Add("BUSINESSMODELTYPE", "BUSINESSMODELTYPE");
            tableMapping.ColumnMappings.Add("COMPETITORS", "COMPETITORS");
            tableMapping.ColumnMappings.Add("COMPETITIVEADVANGE", "COMPETITIVEADVANGE");
            tableMapping.ColumnMappings.Add("INVESTMENTAMOUNT", "INVESTMENTAMOUNT");
            tableMapping.ColumnMappings.Add("APPROVED", "APPROVED");
            tableMapping.ColumnMappings.Add("LOGOAPPROVED", "LOGOAPPROVED");
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY");
            tableMapping.ColumnMappings.Add("CREATIONDATE", "CREATIONDATE");
            tableMapping.ColumnMappings.Add("MODIFIEDBY", "MODIFIEDBY");
            tableMapping.ColumnMappings.Add("MODIFICATIONDATE", "MODIFICATIONDATE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PROJECT] WHERE (([RECID] = @Original_RECID) AND ([NAME] = @Original_NAME) AND ((@IsNull_ACRONYM = 1 AND [ACRONYM] IS NULL) OR ([ACRONYM] = @Original_ACRONYM)) AND ([SECTOR] = @Original_SECTOR) AND ((@IsNull_BUSINESSMODELTYPE = 1 AND [BUSINESSMODELTYPE] IS NULL) OR ([BUSINESSMODELTYPE] = @Original_BUSINESSMODELTYPE)) AND ((@IsNull_INVESTMENTAMOUNT = 1 AND [INVESTMENTAMOUNT] IS NULL) OR ([INVESTMENTAMOUNT] = @Original_INVESTMENTAMOUNT)) AND ((@IsNull_APPROVED = 1 AND [APPROVED] IS NULL) OR ([APPROVED] = @Original_APPROVED)) AND ((@IsNull_LOGOAPPROVED = 1 AND [LOGOAPPROVED] IS NULL) OR ([LOGOAPPROVED] = @Original_LOGOAPPROVED)) AND ([CREATEDBY] = @Original_CREATEDBY) AND ([CREATIONDATE] = @Original_CREATIONDATE) AND ((@IsNull_MODIFIEDBY = 1 AND [MODIFIEDBY] IS NULL) OR ([MODIFIEDBY] = @Original_MODIFIEDBY)) AND ((@IsNull_MODIFICATIONDATE = 1 AND [MODIFICATIONDATE] IS NULL) OR ([MODIFICATIONDATE] = @Original_MODIFICATIONDATE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RECID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RECID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ACRONYM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ACRONYM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ACRONYM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ACRONYM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SECTOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SECTOR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BUSINESSMODELTYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSMODELTYPE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BUSINESSMODELTYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSMODELTYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_INVESTMENTAMOUNT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INVESTMENTAMOUNT", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_INVESTMENTAMOUNT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INVESTMENTAMOUNT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_APPROVED", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "APPROVED", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_APPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "APPROVED", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LOGOAPPROVED", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGOAPPROVED", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LOGOAPPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGOAPPROVED", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CREATEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATEDBY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CREATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATIONDATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODIFIEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFIEDBY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODIFIEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFIEDBY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODIFICATIONDATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFICATIONDATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODIFICATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFICATIONDATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PROJECT] ([LOGO], [PPT], [NAME], [ACRONYM], [ONELINEPITCH], [SECTOR], [BUSINESSSUMMARY], [MANAGEMENT], [CUSTOMERPROBLEM], [PRODUCTORSERVICES], [TARGETMARKET], [CUSTOMERS], [STRATEGY], [BUSINESSMODELTYPE], [COMPETITORS], [COMPETITIVEADVANGE], [INVESTMENTAMOUNT], [APPROVED], [LOGOAPPROVED], [CREATEDBY], [CREATIONDATE], [MODIFIEDBY], [MODIFICATIONDATE]) VALUES (@LOGO, @PPT, @NAME, @ACRONYM, @ONELINEPITCH, @SECTOR, @BUSINESSSUMMARY, @MANAGEMENT, @CUSTOMERPROBLEM, @PRODUCTORSERVICES, @TARGETMARKET, @CUSTOMERS, @STRATEGY, @BUSINESSMODELTYPE, @COMPETITORS, @COMPETITIVEADVANGE, @INVESTMENTAMOUNT, @APPROVED, @LOGOAPPROVED, @CREATEDBY, @CREATIONDATE, @MODIFIEDBY, @MODIFICATIONDATE);
SELECT RECID, LOGO, PPT, NAME, ACRONYM, ONELINEPITCH, SECTOR, BUSINESSSUMMARY, MANAGEMENT, CUSTOMERPROBLEM, PRODUCTORSERVICES, TARGETMARKET, CUSTOMERS, STRATEGY, BUSINESSMODELTYPE, COMPETITORS, COMPETITIVEADVANGE, INVESTMENTAMOUNT, APPROVED, LOGOAPPROVED, CREATEDBY, CREATIONDATE, MODIFIEDBY, MODIFICATIONDATE FROM PROJECT WHERE (RECID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOGO", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PPT", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PPT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ACRONYM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ACRONYM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ONELINEPITCH", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ONELINEPITCH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SECTOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SECTOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BUSINESSSUMMARY", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSSUMMARY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MANAGEMENT", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MANAGEMENT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CUSTOMERPROBLEM", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMERPROBLEM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRODUCTORSERVICES", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRODUCTORSERVICES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TARGETMARKET", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TARGETMARKET", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CUSTOMERS", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMERS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STRATEGY", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STRATEGY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BUSINESSMODELTYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSMODELTYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPETITORS", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPETITORS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPETITIVEADVANGE", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPETITIVEADVANGE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INVESTMENTAMOUNT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INVESTMENTAMOUNT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@APPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "APPROVED", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOGOAPPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGOAPPROVED", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CREATEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CREATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATIONDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODIFIEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODIFICATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFICATIONDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PROJECT] SET [LOGO] = @LOGO, [PPT] = @PPT, [NAME] = @NAME, [ACRONYM" +
                "] = @ACRONYM, [ONELINEPITCH] = @ONELINEPITCH, [SECTOR] = @SECTOR, [BUSINESSSUMMA" +
                "RY] = @BUSINESSSUMMARY, [MANAGEMENT] = @MANAGEMENT, [CUSTOMERPROBLEM] = @CUSTOME" +
                "RPROBLEM, [PRODUCTORSERVICES] = @PRODUCTORSERVICES, [TARGETMARKET] = @TARGETMARK" +
                "ET, [CUSTOMERS] = @CUSTOMERS, [STRATEGY] = @STRATEGY, [BUSINESSMODELTYPE] = @BUS" +
                "INESSMODELTYPE, [COMPETITORS] = @COMPETITORS, [COMPETITIVEADVANGE] = @COMPETITIV" +
                "EADVANGE, [INVESTMENTAMOUNT] = @INVESTMENTAMOUNT, [APPROVED] = @APPROVED, [LOGOA" +
                "PPROVED] = @LOGOAPPROVED, [CREATEDBY] = @CREATEDBY, [CREATIONDATE] = @CREATIONDA" +
                "TE, [MODIFIEDBY] = @MODIFIEDBY, [MODIFICATIONDATE] = @MODIFICATIONDATE WHERE (([" +
                "RECID] = @Original_RECID) AND ([NAME] = @Original_NAME) AND ((@IsNull_ACRONYM = " +
                "1 AND [ACRONYM] IS NULL) OR ([ACRONYM] = @Original_ACRONYM)) AND ([SECTOR] = @Or" +
                "iginal_SECTOR) AND ((@IsNull_BUSINESSMODELTYPE = 1 AND [BUSINESSMODELTYPE] IS NU" +
                "LL) OR ([BUSINESSMODELTYPE] = @Original_BUSINESSMODELTYPE)) AND ((@IsNull_INVEST" +
                "MENTAMOUNT = 1 AND [INVESTMENTAMOUNT] IS NULL) OR ([INVESTMENTAMOUNT] = @Origina" +
                "l_INVESTMENTAMOUNT)) AND ((@IsNull_APPROVED = 1 AND [APPROVED] IS NULL) OR ([APP" +
                "ROVED] = @Original_APPROVED)) AND ((@IsNull_LOGOAPPROVED = 1 AND [LOGOAPPROVED] " +
                "IS NULL) OR ([LOGOAPPROVED] = @Original_LOGOAPPROVED)) AND ([CREATEDBY] = @Origi" +
                "nal_CREATEDBY) AND ([CREATIONDATE] = @Original_CREATIONDATE) AND ((@IsNull_MODIF" +
                "IEDBY = 1 AND [MODIFIEDBY] IS NULL) OR ([MODIFIEDBY] = @Original_MODIFIEDBY)) AN" +
                "D ((@IsNull_MODIFICATIONDATE = 1 AND [MODIFICATIONDATE] IS NULL) OR ([MODIFICATI" +
                "ONDATE] = @Original_MODIFICATIONDATE)));\r\nSELECT RECID, LOGO, PPT, NAME, ACRONYM" +
                ", ONELINEPITCH, SECTOR, BUSINESSSUMMARY, MANAGEMENT, CUSTOMERPROBLEM, PRODUCTORS" +
                "ERVICES, TARGETMARKET, CUSTOMERS, STRATEGY, BUSINESSMODELTYPE, COMPETITORS, COMP" +
                "ETITIVEADVANGE, INVESTMENTAMOUNT, APPROVED, LOGOAPPROVED, CREATEDBY, CREATIONDAT" +
                "E, MODIFIEDBY, MODIFICATIONDATE FROM PROJECT WHERE (RECID = @RECID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOGO", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PPT", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PPT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ACRONYM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ACRONYM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ONELINEPITCH", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ONELINEPITCH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SECTOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SECTOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BUSINESSSUMMARY", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSSUMMARY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MANAGEMENT", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MANAGEMENT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CUSTOMERPROBLEM", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMERPROBLEM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRODUCTORSERVICES", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRODUCTORSERVICES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TARGETMARKET", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TARGETMARKET", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CUSTOMERS", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMERS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STRATEGY", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STRATEGY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BUSINESSMODELTYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSMODELTYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPETITORS", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPETITORS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPETITIVEADVANGE", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPETITIVEADVANGE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INVESTMENTAMOUNT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INVESTMENTAMOUNT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@APPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "APPROVED", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOGOAPPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGOAPPROVED", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CREATEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CREATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATIONDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODIFIEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODIFICATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFICATIONDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RECID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RECID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ACRONYM", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ACRONYM", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ACRONYM", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ACRONYM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SECTOR", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SECTOR", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_BUSINESSMODELTYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSMODELTYPE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BUSINESSMODELTYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BUSINESSMODELTYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_INVESTMENTAMOUNT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INVESTMENTAMOUNT", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_INVESTMENTAMOUNT", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INVESTMENTAMOUNT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_APPROVED", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "APPROVED", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_APPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "APPROVED", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LOGOAPPROVED", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGOAPPROVED", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LOGOAPPROVED", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOGOAPPROVED", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CREATEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATEDBY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CREATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CREATIONDATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODIFIEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFIEDBY", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODIFIEDBY", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFIEDBY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MODIFICATIONDATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFICATIONDATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MODIFICATIONDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MODIFICATIONDATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RECID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RECID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Types.Properties.Settings.Default.MersinBANConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT RECID, LOGO, PPT, NAME, ACRONYM, ONELINEPITCH, SECTOR, BUSINESSSUMMARY, MANAGEMENT, CUSTOMERPROBLEM, PRODUCTORSERVICES, TARGETMARKET, CUSTOMERS, STRATEGY, BUSINESSMODELTYPE, COMPETITORS, COMPETITIVEADVANGE, INVESTMENTAMOUNT, APPROVED, LOGOAPPROVED, CREATEDBY, CREATIONDATE, MODIFIEDBY, MODIFICATIONDATE FROM dbo.PROJECT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSProject.PROJECTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSProject.PROJECTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DSProject.PROJECTDataTable dataTable = new DSProject.PROJECTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSProject.PROJECTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSProject dataSet) {
            return this.Adapter.Update(dataSet, "PROJECT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_RECID, string Original_NAME, string Original_ACRONYM, int Original_SECTOR, global::System.Nullable<int> Original_BUSINESSMODELTYPE, string Original_INVESTMENTAMOUNT, global::System.Nullable<bool> Original_APPROVED, global::System.Nullable<bool> Original_LOGOAPPROVED, int Original_CREATEDBY, System.DateTime Original_CREATIONDATE, global::System.Nullable<int> Original_MODIFIEDBY, global::System.Nullable<global::System.DateTime> Original_MODIFICATIONDATE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_RECID));
            if ((Original_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NAME));
            }
            if ((Original_ACRONYM == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ACRONYM));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SECTOR));
            if ((Original_BUSINESSMODELTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_BUSINESSMODELTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_INVESTMENTAMOUNT == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_INVESTMENTAMOUNT));
            }
            if ((Original_APPROVED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_APPROVED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_LOGOAPPROVED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_LOGOAPPROVED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_CREATEDBY));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((System.DateTime)(Original_CREATIONDATE));
            if ((Original_MODIFIEDBY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_MODIFIEDBY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_MODIFICATIONDATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_MODIFICATIONDATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    byte[] LOGO, 
                    byte[] PPT, 
                    string NAME, 
                    string ACRONYM, 
                    string ONELINEPITCH, 
                    int SECTOR, 
                    string BUSINESSSUMMARY, 
                    string MANAGEMENT, 
                    string CUSTOMERPROBLEM, 
                    string PRODUCTORSERVICES, 
                    string TARGETMARKET, 
                    string CUSTOMERS, 
                    string STRATEGY, 
                    global::System.Nullable<int> BUSINESSMODELTYPE, 
                    string COMPETITORS, 
                    string COMPETITIVEADVANGE, 
                    string INVESTMENTAMOUNT, 
                    global::System.Nullable<bool> APPROVED, 
                    global::System.Nullable<bool> LOGOAPPROVED, 
                    int CREATEDBY, 
                    System.DateTime CREATIONDATE, 
                    global::System.Nullable<int> MODIFIEDBY, 
                    global::System.Nullable<global::System.DateTime> MODIFICATIONDATE) {
            if ((LOGO == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((byte[])(LOGO));
            }
            if ((PPT == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((byte[])(PPT));
            }
            if ((NAME == null)) {
                throw new global::System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NAME));
            }
            if ((ACRONYM == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ACRONYM));
            }
            if ((ONELINEPITCH == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ONELINEPITCH));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(SECTOR));
            if ((BUSINESSSUMMARY == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(BUSINESSSUMMARY));
            }
            if ((MANAGEMENT == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(MANAGEMENT));
            }
            if ((CUSTOMERPROBLEM == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CUSTOMERPROBLEM));
            }
            if ((PRODUCTORSERVICES == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PRODUCTORSERVICES));
            }
            if ((TARGETMARKET == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(TARGETMARKET));
            }
            if ((CUSTOMERS == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(CUSTOMERS));
            }
            if ((STRATEGY == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(STRATEGY));
            }
            if ((BUSINESSMODELTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(BUSINESSMODELTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((COMPETITORS == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(COMPETITORS));
            }
            if ((COMPETITIVEADVANGE == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(COMPETITIVEADVANGE));
            }
            if ((INVESTMENTAMOUNT == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(INVESTMENTAMOUNT));
            }
            if ((APPROVED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((bool)(APPROVED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((LOGOAPPROVED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((bool)(LOGOAPPROVED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[19].Value = ((int)(CREATEDBY));
            this.Adapter.InsertCommand.Parameters[20].Value = ((System.DateTime)(CREATIONDATE));
            if ((MODIFIEDBY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(MODIFIEDBY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((MODIFICATIONDATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((System.DateTime)(MODIFICATIONDATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    byte[] LOGO, 
                    byte[] PPT, 
                    string NAME, 
                    string ACRONYM, 
                    string ONELINEPITCH, 
                    int SECTOR, 
                    string BUSINESSSUMMARY, 
                    string MANAGEMENT, 
                    string CUSTOMERPROBLEM, 
                    string PRODUCTORSERVICES, 
                    string TARGETMARKET, 
                    string CUSTOMERS, 
                    string STRATEGY, 
                    global::System.Nullable<int> BUSINESSMODELTYPE, 
                    string COMPETITORS, 
                    string COMPETITIVEADVANGE, 
                    string INVESTMENTAMOUNT, 
                    global::System.Nullable<bool> APPROVED, 
                    global::System.Nullable<bool> LOGOAPPROVED, 
                    int CREATEDBY, 
                    System.DateTime CREATIONDATE, 
                    global::System.Nullable<int> MODIFIEDBY, 
                    global::System.Nullable<global::System.DateTime> MODIFICATIONDATE, 
                    int Original_RECID, 
                    string Original_NAME, 
                    string Original_ACRONYM, 
                    int Original_SECTOR, 
                    global::System.Nullable<int> Original_BUSINESSMODELTYPE, 
                    string Original_INVESTMENTAMOUNT, 
                    global::System.Nullable<bool> Original_APPROVED, 
                    global::System.Nullable<bool> Original_LOGOAPPROVED, 
                    int Original_CREATEDBY, 
                    System.DateTime Original_CREATIONDATE, 
                    global::System.Nullable<int> Original_MODIFIEDBY, 
                    global::System.Nullable<global::System.DateTime> Original_MODIFICATIONDATE, 
                    int RECID) {
            if ((LOGO == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((byte[])(LOGO));
            }
            if ((PPT == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((byte[])(PPT));
            }
            if ((NAME == null)) {
                throw new global::System.ArgumentNullException("NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NAME));
            }
            if ((ACRONYM == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ACRONYM));
            }
            if ((ONELINEPITCH == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ONELINEPITCH));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(SECTOR));
            if ((BUSINESSSUMMARY == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(BUSINESSSUMMARY));
            }
            if ((MANAGEMENT == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(MANAGEMENT));
            }
            if ((CUSTOMERPROBLEM == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CUSTOMERPROBLEM));
            }
            if ((PRODUCTORSERVICES == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PRODUCTORSERVICES));
            }
            if ((TARGETMARKET == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(TARGETMARKET));
            }
            if ((CUSTOMERS == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(CUSTOMERS));
            }
            if ((STRATEGY == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(STRATEGY));
            }
            if ((BUSINESSMODELTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(BUSINESSMODELTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((COMPETITORS == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(COMPETITORS));
            }
            if ((COMPETITIVEADVANGE == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(COMPETITIVEADVANGE));
            }
            if ((INVESTMENTAMOUNT == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(INVESTMENTAMOUNT));
            }
            if ((APPROVED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(APPROVED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((LOGOAPPROVED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(LOGOAPPROVED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(CREATEDBY));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(CREATIONDATE));
            if ((MODIFIEDBY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(MODIFIEDBY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((MODIFICATIONDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(MODIFICATIONDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_RECID));
            if ((Original_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_NAME));
            }
            if ((Original_ACRONYM == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_ACRONYM));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_SECTOR));
            if ((Original_BUSINESSMODELTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_BUSINESSMODELTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_INVESTMENTAMOUNT == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_INVESTMENTAMOUNT));
            }
            if ((Original_APPROVED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((bool)(Original_APPROVED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_LOGOAPPROVED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((bool)(Original_LOGOAPPROVED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_CREATEDBY));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((System.DateTime)(Original_CREATIONDATE));
            if ((Original_MODIFIEDBY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((int)(Original_MODIFIEDBY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_MODIFICATIONDATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((System.DateTime)(Original_MODIFICATIONDATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(RECID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    byte[] LOGO, 
                    byte[] PPT, 
                    string NAME, 
                    string ACRONYM, 
                    string ONELINEPITCH, 
                    int SECTOR, 
                    string BUSINESSSUMMARY, 
                    string MANAGEMENT, 
                    string CUSTOMERPROBLEM, 
                    string PRODUCTORSERVICES, 
                    string TARGETMARKET, 
                    string CUSTOMERS, 
                    string STRATEGY, 
                    global::System.Nullable<int> BUSINESSMODELTYPE, 
                    string COMPETITORS, 
                    string COMPETITIVEADVANGE, 
                    string INVESTMENTAMOUNT, 
                    global::System.Nullable<bool> APPROVED, 
                    global::System.Nullable<bool> LOGOAPPROVED, 
                    int CREATEDBY, 
                    System.DateTime CREATIONDATE, 
                    global::System.Nullable<int> MODIFIEDBY, 
                    global::System.Nullable<global::System.DateTime> MODIFICATIONDATE, 
                    int Original_RECID, 
                    string Original_NAME, 
                    string Original_ACRONYM, 
                    int Original_SECTOR, 
                    global::System.Nullable<int> Original_BUSINESSMODELTYPE, 
                    string Original_INVESTMENTAMOUNT, 
                    global::System.Nullable<bool> Original_APPROVED, 
                    global::System.Nullable<bool> Original_LOGOAPPROVED, 
                    int Original_CREATEDBY, 
                    System.DateTime Original_CREATIONDATE, 
                    global::System.Nullable<int> Original_MODIFIEDBY, 
                    global::System.Nullable<global::System.DateTime> Original_MODIFICATIONDATE) {
            return this.Update(LOGO, PPT, NAME, ACRONYM, ONELINEPITCH, SECTOR, BUSINESSSUMMARY, MANAGEMENT, CUSTOMERPROBLEM, PRODUCTORSERVICES, TARGETMARKET, CUSTOMERS, STRATEGY, BUSINESSMODELTYPE, COMPETITORS, COMPETITIVEADVANGE, INVESTMENTAMOUNT, APPROVED, LOGOAPPROVED, CREATEDBY, CREATIONDATE, MODIFIEDBY, MODIFICATIONDATE, Original_RECID, Original_NAME, Original_ACRONYM, Original_SECTOR, Original_BUSINESSMODELTYPE, Original_INVESTMENTAMOUNT, Original_APPROVED, Original_LOGOAPPROVED, Original_CREATEDBY, Original_CREATIONDATE, Original_MODIFIEDBY, Original_MODIFICATIONDATE, Original_RECID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private PROJECTTableAdapter _pROJECTTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PROJECTTableAdapter PROJECTTableAdapter {
            get {
                return this._pROJECTTableAdapter;
            }
            set {
                this._pROJECTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._pROJECTTableAdapter != null) 
                            && (this._pROJECTTableAdapter.Connection != null))) {
                    return this._pROJECTTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._pROJECTTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DSProject dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PROJECT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pROJECTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DSProject dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PROJECT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pROJECTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DSProject dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._pROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PROJECT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pROJECTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DSProject dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._pROJECTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pROJECTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._pROJECTTableAdapter != null)) {
                    revertConnections.Add(this._pROJECTTableAdapter, this._pROJECTTableAdapter.Connection);
                    this._pROJECTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pROJECTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pROJECTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pROJECTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pROJECTTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._pROJECTTableAdapter != null)) {
                    this._pROJECTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pROJECTTableAdapter]));
                    this._pROJECTTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591